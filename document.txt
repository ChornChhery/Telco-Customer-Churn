import numpy as np
import pandas as pd
df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
df
df.columns
df.isnull().sum()
df.describe()
df.shape
df.info()
print(df["gender"].unique())
print(df['SeniorCitizen'].unique())
np.sum(df['Churn'] == 'Yes'), np.sum(df['Churn'] == 'No')
(df['Churn'] == 'Yes').mean(), (df['Churn'] == 'No').mean()
# Display the unique values in all the columns

numerical_list = ['tenure', 'MonthlyCharges', 'TotalCharges']

for col in df.columns:
    if col not in numerical_list:
        print(f"{col}: {df[col].unique()}")
        print()

len(df[df['TotalCharges']== ' '])

df['TotalCharges'] = df['TotalCharges'].replace({" ": "0.0"})
df['TotalCharges'] = df['TotalCharges'].astype(float)
df.info()

# Count and percentage of Churn
churn_counts = df['Churn'].value_counts()
churn_percentages = df['Churn'].value_counts(normalize=True) * 100

# Combine into a DataFrame for nice display
churn_dist = pd.DataFrame({
    'Count': churn_counts,
    'Percentage': churn_percentages.round(1)
})

print("การกระจายของตัวแปรเป้าหมาย (Churn):")
print(churn_dist)

# Count and percentage of Contract
contract_counts = df['Contract'].value_counts()
contract_percentages = df['Contract'].value_counts(normalize=True) * 100

# Combine into a DataFrame
contract_dist = pd.DataFrame({
    'Count': contract_counts,
    'Percentage': contract_percentages.round(1)
})

print("\nการกระจายของประเภทสัญญา (Contract):")
print(contract_dist)

import matplotlib.pyplot as plt
import seaborn as sns

fig, ax = plt.subplots(1, 2, figsize=(12, 5))

sns.countplot(data=df, x='Churn', ax=ax[0])
ax[0].set_title('Churn Distribution')

sns.countplot(data=df, x='Contract', ax=ax[1])
ax[1].set_title('Contract Type Distribution')

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['MonthlyCharges'], bins=30, kde=True, color='skyblue')
plt.title('Histogram of Monthly Charges (Bimodal)')
plt.xlabel('Monthly Charges ($)')
plt.ylabel('Number of Customers')
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(data=df, x='Churn', y='tenure', palette='Set2')
plt.title('Box Plot: Tenure vs Churn')
plt.xlabel('Churn (Cancel service?)')
plt.ylabel('Tenure (Months)')
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

avg_tenure = df.groupby('Churn')['tenure'].mean().round(1)
print("ค่าเฉลี่ยของ tenure แยกตาม Churn:")
for churn_status, avg in avg_tenure.items():
    print(f"ลูกค้าที่{'ยกเลิก' if churn_status == 'Yes' else 'ไม่ยกเลิก'}บริการ: {avg} เดือน")


# จัดการข้อมูล TotalCharges ที่อาจมีค่าว่างและแปลงประเภทข้อมูล
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df['TotalCharges'] = df['TotalCharges'].fillna(0)

# สร้าง Facet Plot เพื่อแสดงความสัมพันธ์
g = sns.FacetGrid(df, col='Contract', hue='Churn', col_wrap=3, height=4, aspect=1.2, palette=['#1f77b4', '#d62728'])
g.map(sns.scatterplot, 'tenure', 'MonthlyCharges', alpha=0.7)
g.add_legend()

# กำหนดชื่อกราฟและปรับการแสดงผล
axes = g.axes.flatten()
axes[0].set_title('Month-to-month')
axes[1].set_title('One year')
axes[2].set_title('Two year')
plt.figure(figsize=(20, 10))
plt.suptitle('Churn Distribution by Tenure, Monthly Charges, and Contract', y=1.05, fontsize=16)
plt.tight_layout()
plt.show()

# --- 1. อัตราการยกเลิกบริการ (Churn Rate) ---
print("1. อัตราการยกเลิกบริการ (Churn Rate)")
churn_rate = df['Churn'].value_counts(normalize=True) * 100
print(churn_rate)

# --- 2. สัดส่วนลูกค้าตามประเภทสัญญา (Contract) ---
print("2. สัดส่วนลูกค้าตามประเภทสัญญา")
contract_distribution = df['Contract'].value_counts(normalize=True) * 100
print(contract_distribution)

# --- 3. ความสัมพันธ์ระหว่าง tenure และ Churn ---
print("3. ค่าเฉลี่ย tenure (ระยะเวลาใช้งาน) แยกตามสถานะ Churn")
tenure_by_churn = df.groupby('Churn')['tenure'].mean()
print(tenure_by_churn)

# correlation matrix - heatmap
plt.figure(figsize=(10,8))
sns.heatmap(df[['tenure','MonthlyCharges','TotalCharges']].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

df = df.drop('customerID',axis=1)

df['Churn'] = df['Churn'].replace({'Yes':1, 'No':0})

print(df["Churn"].value_counts())

from sklearn.preprocessing import StandardScaler, LabelEncoder

# identifying columns with object data type
object_columns = df.select_dtypes(include="object").columns
print(object_columns)

from sklearn.preprocessing import LabelEncoder
import pickle
# initialize a dictionary to save the encoders
encoders = {}

# apply label encoding and store the encoders
for column in object_columns:
  label_encoder = LabelEncoder()
  df[column] = label_encoder.fit_transform(df[column])
  encoders[column] = label_encoder


# save the encoders to a pickle file
with open("encoders.pkl", "wb") as f:
  pickle.dump(encoders, f)

encoders

df.info()

x = df.drop(columns=['Churn'])
y = df['Churn']

x.shape, y.shape

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

from imblearn.over_sampling import SMOTE

smote = SMOTE(random_state=42)

